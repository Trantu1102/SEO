const sendBtn = document.getElementById("sendBtn");
const copyBtn = document.getElementById("copyBtn");
const linkInput = document.getElementById("linkInput");
const resultDiv = document.getElementById("result"); // ƒê·∫£m b·∫£o d√πng resultDiv nh·∫•t qu√°n

sendBtn.addEventListener("click", () => {
  const link = linkInput.value.trim();
  if (!link) {
    alert("Vui l√≤ng nh·∫≠p link preview!");
    return;
  }
  resultDiv.innerHTML = "‚è≥ ƒêang x·ª≠ l√Ω..."; // S·ª≠ d·ª•ng resultDiv

  fetch(
    "https://n8n.autowf.xyz/webhook/69ba5643-617f-4036-99a4-ff8b651f89c6",
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        "Access-Control-Allow-Origin": "*",
      },
      mode: "cors",
      body: JSON.stringify({ link: link }),
    }
  )
    .then((response) => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      // Chuy·ªÉn response th√†nh JSON ngay t·∫°i ƒë√¢y
      return response.json();
    })
    .then(data => {
      console.log('Webhook data received:', data); // Log d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c

      let seoText = '';
      let spellingText = '';

      // Ki·ªÉm tra n·∫øu data l√† m·∫£ng v√† c√≥ √≠t nh·∫•t 2 ph·∫ßn t·ª≠
      if (Array.isArray(data) && data.length >= 2) {
        // L·∫•y ph·∫ßn SEO t·ª´ item ƒë·∫ßu ti√™n (index 0)
        if (data[0] && data[0].output) {
          seoText = data[0].output;
        }
        // L·∫•y ph·∫ßn s·ª≠a ch√≠nh t·∫£ t·ª´ item th·ª© hai (index 1)
        if (data[1] && data[1].output) {
          spellingText = data[1].output;
        }
      } else if (Array.isArray(data) && data.length === 1) {
          // Tr∆∞·ªùng h·ª£p ch·ªâ c√≥ 1 item, th·ª≠ ki·ªÉm tra xem n√≥ l√† g√¨
           if (data[0] && data[0].output) {
             if (data[0].output.includes('SEO Title:') || data[0].output.includes('SEO Description:') || data[0].output.includes('SEO Keywords:')) {
                seoText = data[0].output;
             } else {
                spellingText = data[0].output;
             }
           }
      }


      console.log('seoText after processing:', seoText); // Log seoText
      console.log('spellingText after processing:', spellingText); // Log spellingText


      let formatted = "";

      // X·ª≠ l√Ω v√† ƒë·ªãnh d·∫°ng ph·∫ßn SEO
      if (seoText) {
          // Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng c·∫ßn thi·∫øt n·∫øu c·∫ßn (t√πy thu·ªôc v√†o c√°ch b·∫°n format output trong n8n)
          let cleanedSeoText = seoText
             .replace(/^\[|\]$/g, "")
             .replace(/^"|"$/g, "")
             .replace(/"\}$/, "");

          const titleMatch = cleanedSeoText.match(/SEO Title:([\s\S]*?)SEO Description:/i);
          const descMatch = cleanedSeoText.match(/SEO Description:([\s\S]*?)SEO Keywords:/i);
          const keywordsMatch = cleanedSeoText.match(/SEO Keywords:([\s\S]*)/i);

          if (titleMatch && titleMatch[1]) {
            formatted += `üìù <b>Ti√™u ƒë·ªÅ SEO:</b> ${titleMatch[1].trim()}<br/><br/>`;
          }
          if (descMatch && descMatch[1]) {
            formatted += `üìÑ <b>M√¥ t·∫£ SEO:</b> ${descMatch[1].trim()}<br/><br/>`;
          }
          if (keywordsMatch && keywordsMatch[1]) {
            let keywords = keywordsMatch[1].trim();
            // Lo·∫°i b·ªè d·∫•u "}" ·ªü cu·ªëi n·∫øu c√≥
            keywords = keywords.replace(/"\}$/, "");
            formatted += `üîë <b>T·ª´ kh√≥a SEO:</b> ${keywords}`;
          }
      }


      // X·ª≠ l√Ω v√† ƒë·ªãnh d·∫°ng ph·∫ßn s·ª≠a ch√≠nh t·∫£
      if (spellingText) {
        let processedSpellingText = spellingText;
        const snippets = [];
        const regex = /\[(.*?)\]/g;
        let match;
        const windowSize = 200; // TƒÉng s·ªë k√Ω t·ª± l·∫•y tr∆∞·ªõc v√† sau l·ªói

        while ((match = regex.exec(processedSpellingText)) !== null) {
            const fullMatch = match[0]; // V√≠ d·ª•: "[ https://...]" ho·∫∑c "[l·ª´ng l·∫´y]"
            const content = match[1].trim(); // N·ªôi dung b√™n trong [], v√≠ d·ª•: "https://..." ho·∫∑c "l·ª´ng l·∫´y"

            // Ki·ªÉm tra n·ªôi dung b√™n trong
            if (!content.startsWith('http://') && !content.startsWith('https://')) {
                // N·∫øu kh√¥ng ph·∫£i link, l·∫•y ƒëo·∫°n vƒÉn b·∫£n xung quanh
                const startIndex = Math.max(0, match.index - windowSize);
                const endIndex = Math.min(processedSpellingText.length, match.index + fullMatch.length + windowSize);

                let snippet = processedSpellingText.substring(startIndex, endIndex);

                // B√¥i v√†ng c·∫∑p th·∫ª v√† n·ªôi dung trong snippet, th√™m kho·∫£ng tr·∫Øng sau th·∫ª mark
                snippet = snippet.replace(fullMatch, `<mark>${fullMatch}</mark> `); // <-- Th√™m kho·∫£ng tr·∫Øng ·ªü ƒë√¢y

                // Th√™m "..." v√†o ƒë·∫ßu v√† cu·ªëi snippet n·∫øu kh√¥ng ph·∫£i l√† ƒë·∫ßu/cu·ªëi vƒÉn b·∫£n g·ªëc
                let formattedSnippet = '';
                if (startIndex > 0) {
                    formattedSnippet += '...';
                }
                formattedSnippet += snippet;
                if (endIndex < processedSpellingText.length) {
                    formattedSnippet += '...';
                }


                snippets.push(formattedSnippet);
            }
        }

        let cleanedSpellingText = '';
        if (snippets.length > 0) {
             // N·ªëi c√°c snippet l·∫°i v·ªõi d·∫•u ph√¢n c√°ch
             cleanedSpellingText = snippets.join('<br/>...<br/>'); // S·ª≠ d·ª•ng ... ƒë·ªÉ ph√¢n c√°ch c√°c ƒëo·∫°n

             // Thay th·∫ø c√°c k√Ω t·ª± xu·ªëng d√≤ng c√≤n l·∫°i trong c√°c snippet b·∫±ng <br/>
             cleanedSpellingText = cleanedSpellingText.replace(/\n/g, '<br/>');
        }


        if (cleanedSpellingText) {
          // Th√™m d√≤ng tr·ªëng n·∫øu ƒë√£ c√≥ ph·∫ßn SEO
          if (formatted) {
              formatted += `<br/><br/>`;
          }
          formatted += `‚úçÔ∏è <b>S·ª≠a ch√≠nh t·∫£:</b><br/>${cleanedSpellingText}`;
        }
      }

      console.log('Formatted output:', formatted); // Log formatted string

      resultDiv.innerHTML = formatted || "Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ"; // S·ª≠ d·ª•ng resultDiv
    })
    .catch((err) => {
      resultDiv.innerText = "‚ùå L·ªói k·∫øt n·ªëi: " + err.message; // S·ª≠ d·ª•ng resultDiv
    });
});

copyBtn.addEventListener("click", () => {
  const text = resultDiv.innerText; // S·ª≠ d·ª•ng resultDiv
  navigator.clipboard.writeText(text).then(() => {
    alert("‚úÖ ƒê√£ sao ch√©p k·∫øt qu·∫£ v√†o clipboard!");
  });
});
